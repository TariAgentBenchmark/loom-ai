# 默认环境变量
x-default-variables: &default-variables
  REGISTRY: crpi-lxfoqbwevmx9mc1q.cn-chengdu.personal.cr.aliyuncs.com
  NAMESPACE: tari_tech
  FRONTEND_IMAGE: loomai
  BACKEND_IMAGE: loomai-backend
  IMAGE_TAG: latest

services:
  nginx:
    image: m.daocloud.io/docker.io/nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/certbot:/var/www/certbot:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    profiles:
      - production
      - remote

  backend:
    # 优先使用远程镜像，如果环境变量 USE_LOCAL_BUILD=true 则使用本地构建
    image: ${REGISTRY:-crpi-lxfoqbwevmx9mc1q.cn-chengdu.personal.cr.aliyuncs.com}/${NAMESPACE:-tari_tech}/${BACKEND_IMAGE:-loomai-backend}:${IMAGE_TAG:-latest}
    # 不再直接暴露端口，通过nginx代理
    environment:
      - DATABASE_URL=sqlite:///./data/loom_ai.db
      - REDIS_URL=redis://redis:6379/0
      - TUZI_API_KEY=${TUZI_API_KEY:-}
      - TUZI_BASE_URL=${TUZI_BASE_URL:-https://api.tu-zi.com}
      - MEITU_API_KEY=${MEITU_API_KEY:-}
      - MEITU_API_SECRET=${MEITU_API_SECRET:-}
      - MEITU_BASE_URL=${MEITU_BASE_URL:-https://openapi.mtlab.meitu.com}
      - DEWATERMARK_API_KEY=${DEWATERMARK_API_KEY:-}
      - VECTORIZER_API_KEY=${VECTORIZER_API_KEY:-}
      - VECTORIZER_API_SECRET=${VECTORIZER_API_SECRET:-}
      - JIMENG_API_KEY=${JIMENG_API_KEY:-}
      - JIMENG_API_SECRET=${JIMENG_API_SECRET:-}
      - JIMENG_BASE_URL=${JIMENG_BASE_URL:-https://visual.volcengineapi.com}
      - LIBLIB_API_URL=${LIBLIB_API_URL:-https://openapi.liblibai.cloud}
      - LIBLIB_TEMPLATE_UUID=${LIBLIB_TEMPLATE_UUID:-4df2efa0f18d46dc9758803e478eb51c}
      - LIBLIB_WORKFLOW_UUID=${LIBLIB_WORKFLOW_UUID:-18d5858e862d474abe93c72b2fb1b8cc}
      - LIBLIB_ACCESS_KEY=${LIBLIB_ACCESS_KEY:-}
      - LIBLIB_SECRET_KEY=${LIBLIB_SECRET_KEY:-}
      - OSS_ACCESS_KEY_ID=${OSS_ACCESS_KEY_ID:-}
      - OSS_ACCESS_KEY_SECRET=${OSS_ACCESS_KEY_SECRET:-}
      - OSS_ENDPOINT=${OSS_ENDPOINT:-https://oss-cn-hangzhou.aliyuncs.com}
      - OSS_BUCKET_NAME=${OSS_BUCKET_NAME:-}
      - OSS_BUCKET_DOMAIN=${OSS_BUCKET_DOMAIN:-}
      - OSS_EXPIRATION_TIME=${OSS_EXPIRATION_TIME:-3600}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DEBUG=${DEBUG:-true}
      - UPLOAD_PATH=./uploads
      - ALIBABA_CLOUD_ACCESS_KEY_ID=${ALIBABA_CLOUD_ACCESS_KEY_ID:-}
      - ALIBABA_CLOUD_ACCESS_KEY_SECRET=${ALIBABA_CLOUD_ACCESS_KEY_SECRET:-}
      - SMS_SIGN_NAME=${SMS_SIGN_NAME:-}
      - SMS_TEMPLATE_CODE=${SMS_TEMPLATE_CODE:-}
      - SMS_REGION=${SMS_REGION:-cn-hangzhou}
      - SMS_CODE_VALID_MINUTES=${SMS_CODE_VALID_MINUTES:-5}
      - SMS_MOCK_ENABLED=${SMS_MOCK_ENABLED:-false}
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/data:/app/data
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - production
      - remote

  frontend:
    # 优先使用远程镜像，如果环境变量 USE_LOCAL_BUILD=true 则使用本地构建
    image: ${REGISTRY:-crpi-lxfoqbwevmx9mc1q.cn-chengdu.personal.cr.aliyuncs.com}/${NAMESPACE:-tari_tech}/${FRONTEND_IMAGE:-loomai}:${IMAGE_TAG:-latest}
    environment:
      - NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_API_BASE_URL:-https://tuyun.website/api}
    # 不再直接暴露端口，通过nginx代理
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - production
      - remote

  redis:
    image: m.daocloud.io/docker.io/redis:7-alpine
    # 生产环境中不直接暴露Redis端口
    # ports:
    #   - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

volumes:
  redis_data:
